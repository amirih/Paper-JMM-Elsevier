	.file	"IMP1.c"
	.text
	.p2align 4,,15
	.globl	assignToThisCore12
	.type	assignToThisCore12, @function
assignToThisCore12:
.LFB5460:
	.cfi_startproc
	movl	%edi, %r8d
	movl	$mask, %edx
	movl	$16, %ecx
	xorl	%eax, %eax
	movq	%rdx, %rdi
	rep stosq
	movslq	%r8d, %rax
	cmpq	$1023, %rax
	ja	.L2
	shrq	$6, %rax
	movl	$1, %edx
	shlx	%r8, %rdx, %r8
	orq	%r8, mask(,%rax,8)
.L2:
	movslq	%esi, %rax
	cmpq	$1023, %rax
	ja	.L3
	shrq	$6, %rax
	movl	$1, %edx
	shlx	%rsi, %rdx, %rsi
	orq	%rsi, mask(,%rax,8)
.L3:
	movl	$mask, %edx
	movl	$128, %esi
	xorl	%edi, %edi
	jmp	sched_setaffinity
	.cfi_endproc
.LFE5460:
	.size	assignToThisCore12, .-assignToThisCore12
	.p2align 4,,15
	.globl	assignImagef32
	.type	assignImagef32, @function
assignImagef32:
.LFB5461:
	.cfi_startproc
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movq	%rdi, %rbx
	xorl	%r9d, %r9d
	vmovsd	.LC0(%rip), %xmm3
	vmovsd	.LC1(%rip), %xmm5
	vmovsd	.LC2(%rip), %xmm4
	movl	$1195121335, %edi
.L6:
	vcvtsi2sd	%r9d, %xmm2, %xmm2
	vfmadd132sd	%xmm5, %xmm4, %xmm2
	movq	%rbx, %r11
	movl	%r9d, %r10d
	xorl	%esi, %esi
	.p2align 4,,10
	.p2align 3
.L7:
	leal	1(%rsi), %r8d
	movl	%r9d, %eax
	cltd
	idivl	%r8d
	leal	(%rax,%r10), %ecx
	movl	%ecx, %edx
	shrl	%edx
	movl	%edx, %eax
	mull	%edi
	shrl	$5, %edx
	imull	$230, %edx, %edx
	subl	%edx, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm0
	vcvtsi2sd	%esi, %xmm1, %xmm1
	vfmadd132sd	%xmm3, %xmm2, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm6, %xmm6
	vmovss	%xmm6, (%r11)
	addl	%r9d, %r10d
	addq	$4, %r11
	movl	%r8d, %esi
	cmpl	$256, %r8d
	jne	.L7
	incl	%r9d
	addq	$1040, %rbx
	cmpl	$256, %r9d
	jne	.L6
	popq	%rbx
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE5461:
	.size	assignImagef32, .-assignImagef32
	.p2align 4,,15
	.globl	assignMatrixf32
	.type	assignMatrixf32, @function
assignMatrixf32:
.LFB5462:
	.cfi_startproc
	xorl	%r8d, %r8d
	vmovsd	.LC2(%rip), %xmm1
	movl	$274877907, %r10d
.L13:
	xorl	%r9d, %r9d
	movl	$1, %esi
	.p2align 4,,10
	.p2align 3
.L14:
	movl	%r8d, %eax
	cltd
	idivl	%esi
	leal	(%rax,%r9), %ecx
	movl	%ecx, %eax
	mull	%r10d
	shrl	$6, %edx
	imull	$1000, %edx, %edx
	subl	%edx, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm2, %xmm2
	vmovss	%xmm2, -4(%rdi,%rsi,4)
	incq	%rsi
	addl	%r8d, %r9d
	cmpq	$257, %rsi
	jne	.L14
	incl	%r8d
	addq	$1024, %rdi
	cmpl	$256, %r8d
	jne	.L13
	ret
	.cfi_endproc
.LFE5462:
	.size	assignMatrixf32, .-assignMatrixf32
	.p2align 4,,15
	.globl	assignImagei32
	.type	assignImagei32, @function
assignImagei32:
.LFB5463:
	.cfi_startproc
	xorl	%r8d, %r8d
	movl	$-2139062143, %r10d
.L19:
	xorl	%r9d, %r9d
	movl	$1, %esi
	.p2align 4,,10
	.p2align 3
.L20:
	movl	%r8d, %eax
	cltd
	idivl	%esi
	leal	(%rax,%r9), %ecx
	movl	%ecx, %eax
	mull	%r10d
	shrl	$7, %edx
	movl	%edx, %eax
	sall	$8, %eax
	subl	%edx, %eax
	subl	%eax, %ecx
	movl	%ecx, -4(%rdi,%rsi,4)
	incq	%rsi
	addl	%r8d, %r9d
	cmpq	$257, %rsi
	jne	.L20
	incl	%r8d
	addq	$1040, %rdi
	cmpl	$256, %r8d
	jne	.L19
	ret
	.cfi_endproc
.LFE5463:
	.size	assignImagei32, .-assignImagei32
	.p2align 4,,15
	.globl	assignMatrixi32
	.type	assignMatrixi32, @function
assignMatrixi32:
.LFB5464:
	.cfi_startproc
	leaq	1024(%rdi), %rdx
	xorl	%ecx, %ecx
	vmovdqa	.LC4(%rip), %ymm8
	vmovdqa	.LC5(%rip), %ymm4
	vmovdqa	.LC6(%rip), %ymm7
	vmovdqa	.LC7(%rip), %ymm6
	vmovdqa	.LC3(%rip), %ymm9
.L25:
	vmovd	%ecx, %xmm5
	vpbroadcastd	%xmm5, %ymm5
	leaq	-1024(%rdx), %rax
	vmovdqa	%ymm9, %ymm3
	.p2align 4,,10
	.p2align 3
.L26:
	vpmulld	%ymm5, %ymm3, %ymm2
	vpsrlq	$32, %ymm2, %ymm1
	vpmuldq	%ymm4, %ymm2, %ymm0
	vpmuldq	%ymm4, %ymm1, %ymm1
	vpshufb	%ymm7, %ymm0, %ymm0
	vpshufb	%ymm6, %ymm1, %ymm1
	vpor	%ymm1, %ymm0, %ymm0
	vpsrad	$6, %ymm0, %ymm1
	vpslld	$5, %ymm1, %ymm0
	vpsubd	%ymm1, %ymm0, %ymm0
	vpslld	$2, %ymm0, %ymm0
	vpaddd	%ymm1, %ymm0, %ymm0
	vpslld	$3, %ymm0, %ymm0
	vpsubd	%ymm0, %ymm2, %ymm0
	vmovdqu	%ymm0, (%rax)
	addq	$32, %rax
	vpaddd	%ymm8, %ymm3, %ymm3
	cmpq	%rax, %rdx
	jne	.L26
	incl	%ecx
	addq	$1024, %rdx
	cmpl	$256, %ecx
	jne	.L25
	vzeroupper
	ret
	.cfi_endproc
.LFE5464:
	.size	assignMatrixi32, .-assignMatrixi32
	.p2align 4,,15
	.globl	assignMatrixi16
	.type	assignMatrixi16, @function
assignMatrixi16:
.LFB5465:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	leaq	512(%rdi), %rbx
	xorl	%ebp, %ebp
	movl	$558694933, %r12d
.L31:
	leaq	-512(%rbx), %r14
	xorl	%r13d, %r13d
	.p2align 4,,10
	.p2align 3
.L32:
	call	rand
	movl	%eax, %ecx
	movl	%r13d, %edx
	shrl	%edx
	movl	%edx, %eax
	mull	%r12d
	shrl	$4, %edx
	imull	$246, %edx, %edx
	movl	%r13d, %esi
	subl	%edx, %esi
	movl	$1717986919, %edx
	movl	%ecx, %eax
	imull	%edx
	sarl	$2, %edx
	movl	%ecx, %eax
	sarl	$31, %eax
	subl	%eax, %edx
	leal	(%rdx,%rdx,4), %eax
	addl	%eax, %eax
	subl	%eax, %ecx
	addl	%esi, %ecx
	movw	%cx, (%r14)
	addl	%ebp, %r13d
	addq	$2, %r14
	cmpq	%r14, %rbx
	jne	.L32
	incl	%ebp
	addq	$512, %rbx
	cmpl	$256, %ebp
	jne	.L31
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE5465:
	.size	assignMatrixi16, .-assignMatrixi16
	.p2align 4,,15
	.globl	assignImagei16
	.type	assignImagei16, @function
assignImagei16:
.LFB5485:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	leaq	512(%rdi), %rbx
	xorl	%ebp, %ebp
	movl	$558694933, %r12d
.L38:
	leaq	-512(%rbx), %r14
	xorl	%r13d, %r13d
	.p2align 4,,10
	.p2align 3
.L39:
	call	rand
	movl	%eax, %ecx
	movl	%r13d, %edx
	shrl	%edx
	movl	%edx, %eax
	mull	%r12d
	shrl	$4, %edx
	imull	$246, %edx, %edx
	movl	%r13d, %esi
	subl	%edx, %esi
	movl	$1717986919, %edx
	movl	%ecx, %eax
	imull	%edx
	sarl	$2, %edx
	movl	%ecx, %eax
	sarl	$31, %eax
	subl	%eax, %edx
	leal	(%rdx,%rdx,4), %eax
	addl	%eax, %eax
	subl	%eax, %ecx
	addl	%esi, %ecx
	movw	%cx, (%r14)
	addl	%ebp, %r13d
	addq	$2, %r14
	cmpq	%r14, %rbx
	jne	.L39
	incl	%ebp
	addq	$512, %rbx
	cmpl	$256, %ebp
	jne	.L38
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE5485:
	.size	assignImagei16, .-assignImagei16
	.p2align 4,,15
	.globl	imageTranspose
	.type	imageTranspose, @function
imageTranspose:
.LFB5467:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	.cfi_offset 14, -24
	.cfi_offset 13, -32
	.cfi_offset 12, -40
	.cfi_offset 3, -48
	leaq	1036(%rdi), %r8
	movl	$4, %ebx
	movl	$1040, %r11d
	xorl	%r10d, %r10d
	movl	$1, %r9d
	.p2align 4,,10
	.p2align 3
.L45:
	leaq	-1032(%r11), %rdx
	movq	%r8, %rax
	subq	%rdi, %rax
	cmpq	%rax, %rdx
	jg	.L53
	cmpl	$6, %r10d
	jbe	.L53
	leaq	(%rbx,%rdi), %rax
	movl	%r9d, %esi
	shrl	$3, %esi
	salq	$5, %rsi
	addq	%r8, %rsi
	movq	%r8, %rcx
	movq	%r8, %rdx
	.p2align 4,,10
	.p2align 3
.L46:
	vmovups	(%rdx), %ymm0
	vmovss	6216(%rax), %xmm2
	vinsertps	$0x10, 7252(%rax), %xmm2, %xmm3
	vmovss	4144(%rax), %xmm2
	vinsertps	$0x10, 5180(%rax), %xmm2, %xmm2
	vmovss	2072(%rax), %xmm1
	vinsertps	$0x10, 3108(%rax), %xmm1, %xmm4
	vmovss	(%rax), %xmm1
	vinsertps	$0x10, 1036(%rax), %xmm1, %xmm1
	vmovlhps	%xmm4, %xmm1, %xmm1
	vmovlhps	%xmm3, %xmm2, %xmm2
	vinsertf128	$0x1, %xmm2, %ymm1, %ymm1
	vmovups	%ymm1, (%rcx)
	vmovss	%xmm0, (%rax)
	vextractps	$1, %xmm0, 1036(%rax)
	vextractps	$2, %xmm0, 2072(%rax)
	vextractps	$3, %xmm0, 3108(%rax)
	vextractf128	$0x1, %ymm0, %xmm0
	vmovss	%xmm0, 4144(%rax)
	vextractps	$1, %xmm0, 5180(%rax)
	vextractps	$2, %xmm0, 6216(%rax)
	vextractps	$3, %xmm0, 7252(%rax)
	addq	$32, %rdx
	addq	$8288, %rax
	addq	$32, %rcx
	cmpq	%rsi, %rdx
	jne	.L46
	movl	%r9d, %eax
	andl	$-8, %eax
	cmpl	%r9d, %eax
	je	.L49
	movl	%eax, %edx
	leaq	(%r8,%rdx,4), %r12
	vmovss	(%r12), %xmm0
	imulq	$1036, %rdx, %rdx
	movslq	%r9d, %rcx
	salq	$2, %rcx
	leaq	(%rdx,%rcx), %rsi
	addq	%rdi, %rsi
	vmovss	(%rsi), %xmm1
	vmovss	%xmm1, (%r12)
	vmovss	%xmm0, (%rsi)
	leal	1(%rax), %r13d
	cmpl	%r10d, %eax
	jge	.L49
	movslq	%r13d, %rsi
	leaq	(%r8,%rsi,4), %r14
	vmovss	(%r14), %xmm0
	leaq	1036(%rdx,%rcx), %rsi
	addq	%rdi, %rsi
	vmovss	(%rsi), %xmm1
	vmovss	%xmm1, (%r14)
	vmovss	%xmm0, (%rsi)
	leal	2(%rax), %r14d
	cmpl	%r10d, %r13d
	jge	.L49
	movslq	%r14d, %rsi
	leaq	(%r8,%rsi,4), %r13
	vmovss	0(%r13), %xmm0
	leaq	2072(%rdx,%rcx), %rsi
	addq	%rdi, %rsi
	vmovss	(%rsi), %xmm1
	vmovss	%xmm1, 0(%r13)
	vmovss	%xmm0, (%rsi)
	leal	3(%rax), %r13d
	cmpl	%r10d, %r14d
	jge	.L49
	movslq	%r13d, %rsi
	leaq	(%r8,%rsi,4), %r14
	vmovss	(%r14), %xmm0
	leaq	3108(%rdx,%rcx), %rsi
	addq	%rdi, %rsi
	vmovss	(%rsi), %xmm1
	vmovss	%xmm1, (%r14)
	vmovss	%xmm0, (%rsi)
	leal	4(%rax), %r14d
	cmpl	%r10d, %r13d
	jge	.L49
	movslq	%r14d, %rsi
	leaq	(%r8,%rsi,4), %r13
	vmovss	0(%r13), %xmm0
	leaq	4144(%rdx,%rcx), %rsi
	addq	%rdi, %rsi
	vmovss	(%rsi), %xmm1
	vmovss	%xmm1, 0(%r13)
	vmovss	%xmm0, (%rsi)
	leal	5(%rax), %r13d
	cmpl	%r10d, %r14d
	jge	.L49
	movslq	%r13d, %rsi
	leaq	(%r8,%rsi,4), %r14
	vmovss	(%r14), %xmm0
	leaq	5180(%rdx,%rcx), %rsi
	addq	%rdi, %rsi
	vmovss	(%rsi), %xmm1
	vmovss	%xmm1, (%r14)
	vmovss	%xmm0, (%rsi)
	addl	$6, %eax
	cmpl	%r10d, %r13d
	jge	.L49
	cltq
	leaq	(%r8,%rax,4), %rsi
	vmovss	(%rsi), %xmm0
	leaq	6216(%rdx,%rcx), %rax
	addq	%rdi, %rax
	vmovss	(%rax), %xmm1
	vmovss	%xmm1, (%rsi)
	vmovss	%xmm0, (%rax)
.L49:
	incl	%r9d
	incq	%r10
	addq	$1036, %r8
	addq	$1040, %r11
	addq	$4, %rbx
	cmpl	$256, %r9d
	jne	.L45
	vzeroupper
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret
	.p2align 4,,10
	.p2align 3
.L53:
	.cfi_restore_state
	leaq	(%rdi,%rbx), %rdx
	movq	%r8, %rax
	leaq	(%rdi,%r11), %rcx
	.p2align 4,,10
	.p2align 3
.L48:
	vmovss	(%rax), %xmm0
	vmovss	(%rdx), %xmm1
	vmovss	%xmm1, (%rax)
	vmovss	%xmm0, (%rdx)
	addq	$4, %rax
	addq	$1036, %rdx
	cmpq	%rcx, %rax
	jne	.L48
	jmp	.L49
	.cfi_endproc
.LFE5467:
	.size	imageTranspose, .-imageTranspose
	.p2align 4,,15
	.globl	assignMatrixui16
	.type	assignMatrixui16, @function
assignMatrixui16:
.LFB5468:
	.cfi_startproc
	xorl	%eax, %eax
	vmovdqa	.LC8(%rip), %ymm14
	vmovdqa	.LC9(%rip), %ymm2
	vmovdqa	.LC10(%rip), %ymm13
	vmovdqa	.LC11(%rip), %ymm1
	vmovdqa	.LC12(%rip), %ymm12
	vmovdqa	.LC13(%rip), %ymm11
	vmovdqa	.LC14(%rip), %ymm10
	vmovdqa	.LC15(%rip), %ymm9
	vmovdqa	.LC16(%rip), %ymm8
	vmovdqa	.LC17(%rip), %ymm7
	vmovdqa	.LC18(%rip), %ymm6
	vmovdqa	.LC19(%rip), %ymm5
	vmovdqa	.LC20(%rip), %ymm4
.L62:
	vmovd	%eax, %xmm0
	vpbroadcastd	%xmm0, %ymm0
	vpaddd	%ymm14, %ymm0, %ymm3
	vpand	%ymm2, %ymm3, %ymm3
	vpaddd	%ymm13, %ymm0, %ymm15
	vpand	%ymm2, %ymm15, %ymm15
	vpand	%ymm3, %ymm1, %ymm3
	vpand	%ymm15, %ymm1, %ymm15
	vpackusdw	%ymm15, %ymm3, %ymm3
	vpermq	$216, %ymm3, %ymm3
	vmovdqu	%ymm3, (%rdi)
	vpaddd	%ymm12, %ymm0, %ymm3
	vpand	%ymm2, %ymm3, %ymm3
	vpaddd	%ymm11, %ymm0, %ymm15
	vpand	%ymm2, %ymm15, %ymm15
	vpand	%ymm3, %ymm1, %ymm3
	vpand	%ymm15, %ymm1, %ymm15
	vpackusdw	%ymm15, %ymm3, %ymm3
	vpermq	$216, %ymm3, %ymm3
	vmovdqu	%ymm3, 32(%rdi)
	vpaddd	%ymm10, %ymm0, %ymm3
	vpand	%ymm2, %ymm3, %ymm3
	vpaddd	%ymm9, %ymm0, %ymm15
	vpand	%ymm2, %ymm15, %ymm15
	vpand	%ymm3, %ymm1, %ymm3
	vpand	%ymm15, %ymm1, %ymm15
	vpackusdw	%ymm15, %ymm3, %ymm3
	vpermq	$216, %ymm3, %ymm3
	vmovdqu	%ymm3, 64(%rdi)
	vpaddd	%ymm8, %ymm0, %ymm3
	vpand	%ymm2, %ymm3, %ymm3
	vpaddd	%ymm7, %ymm0, %ymm15
	vpand	%ymm2, %ymm15, %ymm15
	vpand	%ymm3, %ymm1, %ymm3
	vpand	%ymm15, %ymm1, %ymm15
	vpackusdw	%ymm15, %ymm3, %ymm3
	vpermq	$216, %ymm3, %ymm3
	vmovdqu	%ymm3, 96(%rdi)
	vpaddd	%ymm6, %ymm0, %ymm3
	vpand	%ymm2, %ymm3, %ymm3
	vpaddd	%ymm5, %ymm0, %ymm15
	vpand	%ymm2, %ymm15, %ymm15
	vpand	%ymm3, %ymm1, %ymm3
	vpand	%ymm15, %ymm1, %ymm15
	vpackusdw	%ymm15, %ymm3, %ymm3
	vpermq	$216, %ymm3, %ymm3
	vmovdqu	%ymm3, 128(%rdi)
	vpaddd	%ymm4, %ymm0, %ymm3
	vpand	%ymm2, %ymm3, %ymm3
	vpaddd	.LC21(%rip), %ymm0, %ymm15
	vpand	%ymm2, %ymm15, %ymm15
	vpand	%ymm3, %ymm1, %ymm3
	vpand	%ymm15, %ymm1, %ymm15
	vpackusdw	%ymm15, %ymm3, %ymm3
	vpermq	$216, %ymm3, %ymm3
	vmovdqu	%ymm3, 160(%rdi)
	vpaddd	.LC22(%rip), %ymm0, %ymm3
	vpand	%ymm2, %ymm3, %ymm3
	vpaddd	.LC23(%rip), %ymm0, %ymm15
	vpand	%ymm2, %ymm15, %ymm15
	vpand	%ymm3, %ymm1, %ymm3
	vpand	%ymm15, %ymm1, %ymm15
	vpackusdw	%ymm15, %ymm3, %ymm3
	vpermq	$216, %ymm3, %ymm3
	vmovdqu	%ymm3, 192(%rdi)
	vpaddd	.LC24(%rip), %ymm0, %ymm3
	vpand	%ymm2, %ymm3, %ymm3
	vpaddd	.LC25(%rip), %ymm0, %ymm15
	vpand	%ymm2, %ymm15, %ymm15
	vpand	%ymm3, %ymm1, %ymm3
	vpand	%ymm15, %ymm1, %ymm15
	vpackusdw	%ymm15, %ymm3, %ymm3
	vpermq	$216, %ymm3, %ymm3
	vmovdqu	%ymm3, 224(%rdi)
	vpaddd	.LC26(%rip), %ymm0, %ymm3
	vpand	%ymm2, %ymm3, %ymm3
	vpaddd	.LC27(%rip), %ymm0, %ymm15
	vpand	%ymm2, %ymm15, %ymm15
	vpand	%ymm3, %ymm1, %ymm3
	vpand	%ymm15, %ymm1, %ymm15
	vpackusdw	%ymm15, %ymm3, %ymm3
	vpermq	$216, %ymm3, %ymm3
	vmovdqu	%ymm3, 256(%rdi)
	vpaddd	.LC28(%rip), %ymm0, %ymm3
	vpand	%ymm2, %ymm3, %ymm3
	vpaddd	.LC29(%rip), %ymm0, %ymm15
	vpand	%ymm2, %ymm15, %ymm15
	vpand	%ymm3, %ymm1, %ymm3
	vpand	%ymm15, %ymm1, %ymm15
	vpackusdw	%ymm15, %ymm3, %ymm3
	vpermq	$216, %ymm3, %ymm3
	vmovdqu	%ymm3, 288(%rdi)
	vpaddd	.LC30(%rip), %ymm0, %ymm3
	vpand	%ymm2, %ymm3, %ymm3
	vpaddd	.LC31(%rip), %ymm0, %ymm15
	vpand	%ymm2, %ymm15, %ymm15
	vpand	%ymm3, %ymm1, %ymm3
	vpand	%ymm15, %ymm1, %ymm15
	vpackusdw	%ymm15, %ymm3, %ymm3
	vpermq	$216, %ymm3, %ymm3
	vmovdqu	%ymm3, 320(%rdi)
	vpaddd	.LC32(%rip), %ymm0, %ymm3
	vpand	%ymm2, %ymm3, %ymm3
	vpaddd	.LC33(%rip), %ymm0, %ymm15
	vpand	%ymm2, %ymm15, %ymm15
	vpand	%ymm3, %ymm1, %ymm3
	vpand	%ymm15, %ymm1, %ymm15
	vpackusdw	%ymm15, %ymm3, %ymm3
	vpermq	$216, %ymm3, %ymm3
	vmovdqu	%ymm3, 352(%rdi)
	vpaddd	.LC34(%rip), %ymm0, %ymm3
	vpand	%ymm2, %ymm3, %ymm3
	vpaddd	.LC35(%rip), %ymm0, %ymm15
	vpand	%ymm2, %ymm15, %ymm15
	vpand	%ymm3, %ymm1, %ymm3
	vpand	%ymm15, %ymm1, %ymm15
	vpackusdw	%ymm15, %ymm3, %ymm3
	vpermq	$216, %ymm3, %ymm3
	vmovdqu	%ymm3, 384(%rdi)
	vpaddd	.LC36(%rip), %ymm0, %ymm3
	vpand	%ymm2, %ymm3, %ymm3
	vpaddd	.LC37(%rip), %ymm0, %ymm15
	vpand	%ymm2, %ymm15, %ymm15
	vpand	%ymm3, %ymm1, %ymm3
	vpand	%ymm15, %ymm1, %ymm15
	vpackusdw	%ymm15, %ymm3, %ymm3
	vpermq	$216, %ymm3, %ymm3
	vmovdqu	%ymm3, 416(%rdi)
	vpaddd	.LC38(%rip), %ymm0, %ymm3
	vpand	%ymm2, %ymm3, %ymm3
	vpaddd	.LC39(%rip), %ymm0, %ymm15
	vpand	%ymm2, %ymm15, %ymm15
	vpand	%ymm3, %ymm1, %ymm3
	vpand	%ymm15, %ymm1, %ymm15
	vpackusdw	%ymm15, %ymm3, %ymm3
	vpermq	$216, %ymm3, %ymm3
	vmovdqu	%ymm3, 448(%rdi)
	vpaddd	.LC40(%rip), %ymm0, %ymm3
	vpand	%ymm2, %ymm3, %ymm3
	vpaddd	.LC41(%rip), %ymm0, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpand	%ymm3, %ymm1, %ymm3
	vpand	%ymm0, %ymm1, %ymm0
	vpackusdw	%ymm0, %ymm3, %ymm0
	vpermq	$216, %ymm0, %ymm0
	vmovdqu	%ymm0, 480(%rdi)
	incl	%eax
	addq	$512, %rdi
	cmpl	$256, %eax
	jne	.L62
	vzeroupper
	ret
	.cfi_endproc
.LFE5468:
	.size	assignMatrixui16, .-assignMatrixui16
	.p2align 4,,15
	.globl	assignMatrixi8
	.type	assignMatrixi8, @function
assignMatrixi8:
.LFB5469:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
	leaq	256(%rdi), %rbp
	xorl	%ebx, %ebx
.L65:
	leaq	-256(%rbp), %r12
	xorl	%r13d, %r13d
	.p2align 4,,10
	.p2align 3
.L66:
	call	rand
	movzbl	%r13b, %edx
	movl	%eax, %ecx
	shrl	$31, %ecx
	addl	%ecx, %eax
	andl	$1, %eax
	subl	%ecx, %eax
	addl	%edx, %eax
	cltd
	shrl	$24, %edx
	addl	%edx, %eax
	movzbl	%al, %eax
	subl	%edx, %eax
	movb	%al, (%r12)
	addl	%ebx, %r13d
	incq	%r12
	cmpq	%rbp, %r12
	jne	.L66
	incl	%ebx
	leaq	256(%r12), %rbp
	cmpl	$256, %ebx
	jne	.L65
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE5469:
	.size	assignMatrixi8, .-assignMatrixi8
	.p2align 4,,15
	.globl	assignArrayi32
	.type	assignArrayi32, @function
assignArrayi32:
.LFB5470:
	.cfi_startproc
	leaq	262144(%rdi), %rax
	vmovdqa	.LC42(%rip), %ymm4
	vmovdqa	.LC3(%rip), %ymm3
	vmovdqa	.LC4(%rip), %ymm6
	vmovdqa	.LC5(%rip), %ymm5
	vmovdqa	.LC6(%rip), %ymm8
	vmovdqa	.LC7(%rip), %ymm7
	.p2align 4,,10
	.p2align 3
.L72:
	vpmulld	%ymm3, %ymm4, %ymm2
	vpsrlq	$32, %ymm2, %ymm1
	vpmuldq	%ymm5, %ymm2, %ymm0
	vpmuldq	%ymm5, %ymm1, %ymm1
	vpshufb	%ymm8, %ymm0, %ymm0
	vpshufb	%ymm7, %ymm1, %ymm1
	vpor	%ymm1, %ymm0, %ymm0
	vpsrad	$6, %ymm0, %ymm1
	vpslld	$5, %ymm1, %ymm0
	vpsubd	%ymm1, %ymm0, %ymm0
	vpslld	$2, %ymm0, %ymm0
	vpaddd	%ymm1, %ymm0, %ymm0
	vpslld	$3, %ymm0, %ymm0
	vpsubd	%ymm0, %ymm2, %ymm0
	vmovdqu	%ymm0, (%rdi)
	addq	$32, %rdi
	vpaddd	%ymm6, %ymm3, %ymm3
	vpaddd	%ymm6, %ymm4, %ymm4
	cmpq	%rdi, %rax
	jne	.L72
	vzeroupper
	ret
	.cfi_endproc
.LFE5470:
	.size	assignArrayi32, .-assignArrayi32
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC43:
	.string	"DUB4FUL"
	.section	.rodata.str1.8,"aMS",@progbits,1
	.align 8
.LC44:
	.string	"\nthe best is %lld in %lldth iteration and %lld repetitions\n"
	.section	.rodata.str1.1
.LC45:
	.string	"a"
.LC46:
	.string	"fileForSpeedups"
.LC47:
	.string	"%s, %dx%d, %lld\n"
.LC48:
	.string	"output = %f\n"
	.section	.text.startup,"ax",@progbits
	.p2align 4,,15
	.globl	main
	.type	main, @function
main:
.LFB5483:
	.cfi_startproc
	leaq	8(%rsp), %r10
	.cfi_def_cfa 10, 0
	andq	$-32, %rsp
	pushq	-8(%r10)
	pushq	%rbp
	.cfi_escape 0x10,0x6,0x2,0x76,0
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%r10
	.cfi_escape 0xf,0x3,0x76,0x60,0x6
	.cfi_escape 0x10,0xe,0x2,0x76,0x78
	.cfi_escape 0x10,0xd,0x2,0x76,0x70
	.cfi_escape 0x10,0xc,0x2,0x76,0x68
	pushq	%rbx
	subq	$232, %rsp
	.cfi_escape 0x10,0x3,0x2,0x76,0x58
	movl	$3, %esi
	movl	$2, %edi
	call	assignToThisCore12
	movq	$.LC43, programName(%rip)
	movl	$128, half_row(%rip)
	movl	$128, half_col(%rip)
	movl	$in_image, %edi
	call	assignImagef32
	movq	$999999, elapsed_rdtsc(%rip)
	movq	$1999999999, overal_time(%rip)
	movq	$0, ttime(%rip)
	movl	$ou_image+269344, %r8d
	movl	$in_image, %r9d
	subq	$ou_image, %r9
	movq	$in_image-268320, %rdi
	subq	$ou_image, %rdi
	movl	$999999, %r10d
	.p2align 4,,10
	.p2align 3
.L85:
#APP
# 24 "IMP1.c" 1
	#mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm1
# 0 "" 2
#NO_APP
	rdtsc
	salq	$32, %rdx
	orq	%rdx, %rax
	movq	%rax, t1_rdtsc(%rip)
	movl	$0, i(%rip)
	vmovss	low(%rip), %xmm0
	vmovss	low+4(%rip), %xmm1
	vmovss	low+8(%rip), %xmm2
	vmovss	low+12(%rip), %xmm3
	vmovss	high(%rip), %xmm4
	vmovss	high+4(%rip), %xmm5
	vmovss	high+8(%rip), %xmm6
	vmovss	high+12(%rip), %xmm7
	movslq	half_col(%rip), %rax
	leal	7(%rax), %r12d
	leaq	0(,%rax,4), %r13
	leaq	ou_image(%r13), %r14
	xorl	%edx, %edx
	vbroadcastss	%xmm0, %ymm15
	vbroadcastss	%xmm1, %ymm8
	vbroadcastss	%xmm2, %ymm9
	vbroadcastss	%xmm3, %ymm10
	vbroadcastss	%xmm4, %ymm11
	vbroadcastss	%xmm5, %ymm12
	vbroadcastss	%xmm6, %ymm13
	vbroadcastss	%xmm7, %ymm14
	vmovss	%xmm0, -52(%rbp)
	vmovss	%xmm1, -56(%rbp)
	vmovss	%xmm2, -60(%rbp)
	vmovss	%xmm3, -64(%rbp)
	vmovss	%xmm4, -68(%rbp)
	vmovss	%xmm5, -72(%rbp)
	vmovss	%xmm6, -76(%rbp)
	.p2align 4,,10
	.p2align 3
.L79:
	cmpl	$14, %r12d
	jbe	.L75
	leaq	in_image(%rdx), %rsi
	leaq	in_image+8(%rdx), %rcx
	leaq	ou_image(%rdx), %rbx
	leaq	(%r14,%rdx), %r11
	xorl	%eax, %eax
	.p2align 4,,10
	.p2align 3
.L76:
	vmovups	(%rsi,%rax,2), %ymm1
	vmovups	32(%rsi,%rax,2), %ymm4
	vshufps	$136, %ymm4, %ymm1, %ymm3
	vperm2f128	$3, %ymm3, %ymm3, %ymm0
	vshufps	$68, %ymm0, %ymm3, %ymm2
	vshufps	$238, %ymm0, %ymm3, %ymm0
	vinsertf128	$1, %xmm0, %ymm2, %ymm2
	vshufps	$221, %ymm4, %ymm1, %ymm1
	vperm2f128	$3, %ymm1, %ymm1, %ymm0
	vshufps	$68, %ymm0, %ymm1, %ymm3
	vshufps	$238, %ymm0, %ymm1, %ymm0
	vinsertf128	$1, %xmm0, %ymm3, %ymm3
	vmovups	(%rcx,%rax,2), %ymm1
	vmovups	32(%rcx,%rax,2), %ymm5
	vshufps	$136, %ymm5, %ymm1, %ymm4
	vperm2f128	$3, %ymm4, %ymm4, %ymm0
	vshufps	$68, %ymm0, %ymm4, %ymm6
	vshufps	$238, %ymm0, %ymm4, %ymm0
	vinsertf128	$1, %xmm0, %ymm6, %ymm0
	vshufps	$221, %ymm5, %ymm1, %ymm1
	vperm2f128	$3, %ymm1, %ymm1, %ymm4
	vshufps	$68, %ymm4, %ymm1, %ymm5
	vshufps	$238, %ymm4, %ymm1, %ymm4
	vinsertf128	$1, %xmm4, %ymm5, %ymm1
	vmulps	%ymm1, %ymm10, %ymm4
	vfmadd231ps	%ymm0, %ymm9, %ymm4
	vmulps	%ymm3, %ymm8, %ymm5
	vfmadd231ps	%ymm2, %ymm15, %ymm5
	vaddps	%ymm5, %ymm4, %ymm4
	vmovups	%ymm4, (%rbx,%rax)
	vmulps	%ymm1, %ymm14, %ymm1
	vfmadd132ps	%ymm13, %ymm1, %ymm0
	vmulps	%ymm3, %ymm12, %ymm3
	vfmadd132ps	%ymm11, %ymm3, %ymm2
	vaddps	%ymm2, %ymm0, %ymm0
	vmovups	%ymm0, (%r11,%rax)
	addq	$32, %rax
	cmpq	$512, %rax
	jne	.L76
	addq	$1040, %rdx
	cmpq	$266240, %rdx
	jne	.L79
.L94:
	vmovss	-52(%rbp), %xmm0
	vmovss	-56(%rbp), %xmm1
	vmovss	-60(%rbp), %xmm2
	vmovss	-64(%rbp), %xmm3
	vmovss	-68(%rbp), %xmm4
	vmovss	-72(%rbp), %xmm5
	vmovss	-76(%rbp), %xmm6
	movl	$ou_image+268320, %esi
	movslq	half_row(%rip), %rax
	imulq	$1040, %rax, %rax
	leaq	-268320(%rax,%r9), %r11
	.p2align 4,,10
	.p2align 3
.L81:
	vmovss	-267280(%rsi), %xmm8
	vmovss	-268320(%rsi), %xmm11
	leaq	-266240(%rsi), %rax
	leaq	(%rdi,%rsi), %rcx
	leaq	(%r11,%rsi), %rdx
	.p2align 4,,10
	.p2align 3
.L80:
	vmovss	(%rax), %xmm9
	vmovss	1040(%rax), %xmm10
	vmulss	%xmm10, %xmm3, %xmm12
	vfmadd231ss	%xmm9, %xmm2, %xmm12
	vmulss	%xmm1, %xmm8, %xmm13
	vfmadd231ss	%xmm11, %xmm0, %xmm13
	vaddss	%xmm13, %xmm12, %xmm12
	vmovss	%xmm12, (%rcx)
	vmulss	%xmm10, %xmm7, %xmm12
	vfmadd231ss	%xmm9, %xmm6, %xmm12
	vmulss	%xmm5, %xmm8, %xmm8
	vfmadd132ss	%xmm4, %xmm8, %xmm11
	vaddss	%xmm11, %xmm12, %xmm11
	vmovss	%xmm11, (%rdx)
	vmovss	2080(%rax), %xmm8
	vmovss	3120(%rax), %xmm11
	vmulss	%xmm11, %xmm3, %xmm12
	vfmadd231ss	%xmm8, %xmm2, %xmm12
	vmulss	%xmm10, %xmm1, %xmm13
	vfmadd231ss	%xmm9, %xmm0, %xmm13
	vaddss	%xmm13, %xmm12, %xmm12
	vmovss	%xmm12, 1040(%rcx)
	vmulss	%xmm11, %xmm7, %xmm12
	vfmadd231ss	%xmm8, %xmm6, %xmm12
	vmulss	%xmm10, %xmm5, %xmm10
	vfmadd132ss	%xmm4, %xmm10, %xmm9
	vaddss	%xmm9, %xmm12, %xmm9
	vmovss	%xmm9, 1040(%rdx)
	vmovss	4160(%rax), %xmm9
	vmovss	5200(%rax), %xmm10
	vmulss	%xmm10, %xmm3, %xmm12
	vfmadd231ss	%xmm9, %xmm2, %xmm12
	vmulss	%xmm11, %xmm1, %xmm13
	vfmadd231ss	%xmm8, %xmm0, %xmm13
	vaddss	%xmm13, %xmm12, %xmm12
	vmovss	%xmm12, 2080(%rcx)
	vmulss	%xmm10, %xmm7, %xmm12
	vfmadd231ss	%xmm9, %xmm6, %xmm12
	vmulss	%xmm11, %xmm5, %xmm11
	vfmadd132ss	%xmm4, %xmm11, %xmm8
	vaddss	%xmm8, %xmm12, %xmm8
	vmovss	%xmm8, 2080(%rdx)
	vmovss	6240(%rax), %xmm8
	vmovss	7280(%rax), %xmm11
	vmulss	%xmm10, %xmm1, %xmm12
	vfmadd231ss	%xmm9, %xmm0, %xmm12
	vmulss	%xmm11, %xmm3, %xmm13
	vfmadd231ss	%xmm8, %xmm2, %xmm13
	vaddss	%xmm13, %xmm12, %xmm12
	vmovss	%xmm12, 3120(%rcx)
	vmulss	%xmm11, %xmm7, %xmm12
	vfmadd231ss	%xmm8, %xmm6, %xmm12
	vmulss	%xmm10, %xmm5, %xmm10
	vfmadd132ss	%xmm4, %xmm10, %xmm9
	vaddss	%xmm9, %xmm12, %xmm9
	vmovss	%xmm9, 3120(%rdx)
	vmovss	8320(%rax), %xmm9
	vmovss	9360(%rax), %xmm10
	vmulss	%xmm10, %xmm3, %xmm12
	vfmadd231ss	%xmm9, %xmm2, %xmm12
	vmulss	%xmm11, %xmm1, %xmm13
	vfmadd231ss	%xmm8, %xmm0, %xmm13
	vaddss	%xmm13, %xmm12, %xmm12
	vmovss	%xmm12, 4160(%rcx)
	vmulss	%xmm10, %xmm7, %xmm12
	vfmadd231ss	%xmm9, %xmm6, %xmm12
	vmulss	%xmm11, %xmm5, %xmm11
	vfmadd132ss	%xmm4, %xmm11, %xmm8
	vaddss	%xmm8, %xmm12, %xmm8
	vmovss	%xmm8, 4160(%rdx)
	vmovss	10400(%rax), %xmm8
	vmovss	11440(%rax), %xmm11
	vmulss	%xmm11, %xmm3, %xmm12
	vfmadd231ss	%xmm8, %xmm2, %xmm12
	vmulss	%xmm10, %xmm1, %xmm13
	vfmadd231ss	%xmm9, %xmm0, %xmm13
	vaddss	%xmm13, %xmm12, %xmm12
	vmovss	%xmm12, 5200(%rcx)
	vmulss	%xmm11, %xmm7, %xmm12
	vfmadd231ss	%xmm8, %xmm6, %xmm12
	vmulss	%xmm10, %xmm5, %xmm10
	vfmadd132ss	%xmm4, %xmm10, %xmm9
	vaddss	%xmm9, %xmm12, %xmm9
	vmovss	%xmm9, 5200(%rdx)
	vmovss	12480(%rax), %xmm9
	vmovss	13520(%rax), %xmm10
	vmulss	%xmm10, %xmm3, %xmm12
	vfmadd231ss	%xmm9, %xmm2, %xmm12
	vmulss	%xmm11, %xmm1, %xmm13
	vfmadd231ss	%xmm8, %xmm0, %xmm13
	vaddss	%xmm13, %xmm12, %xmm12
	vmovss	%xmm12, 6240(%rcx)
	vmulss	%xmm10, %xmm7, %xmm12
	vfmadd231ss	%xmm9, %xmm6, %xmm12
	vmulss	%xmm11, %xmm5, %xmm11
	vfmadd132ss	%xmm4, %xmm11, %xmm8
	vaddss	%xmm8, %xmm12, %xmm8
	vmovss	%xmm8, 6240(%rdx)
	vmovss	14560(%rax), %xmm11
	vmovss	15600(%rax), %xmm8
	vmulss	%xmm8, %xmm3, %xmm12
	vfmadd231ss	%xmm11, %xmm2, %xmm12
	vmulss	%xmm10, %xmm1, %xmm13
	vfmadd231ss	%xmm9, %xmm0, %xmm13
	vaddss	%xmm13, %xmm12, %xmm12
	vmovss	%xmm12, 7280(%rcx)
	vmulss	%xmm8, %xmm7, %xmm12
	vfmadd231ss	%xmm11, %xmm6, %xmm12
	vmulss	%xmm10, %xmm5, %xmm10
	vfmadd132ss	%xmm4, %xmm10, %xmm9
	vaddss	%xmm9, %xmm12, %xmm9
	vmovss	%xmm9, 7280(%rdx)
	addq	$16640, %rax
	addq	$8320, %rcx
	addq	$8320, %rdx
	cmpq	%rsi, %rax
	jne	.L80
	leaq	4(%rax), %rsi
	cmpq	%rsi, %r8
	jne	.L81
	movl	$128, i(%rip)
	movl	$256, jj(%rip)
	movl	$256, j(%rip)
	rdtsc
	salq	$32, %rdx
	orq	%rdx, %rax
	movq	%rax, t2_rdtsc(%rip)
#APP
# 100 "IMP1.c" 1
	#mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm2
# 0 "" 2
#NO_APP
	movq	t2_rdtsc(%rip), %rax
	subq	t1_rdtsc(%rip), %rax
	movq	%rax, ttotal_rdtsc(%rip)
	movq	ttbest_rdtsc(%rip), %rsi
	movq	elapsed_rdtsc(%rip), %rdx
	cmpq	%rsi, %rax
	jge	.L83
	movq	%rax, ttbest_rdtsc(%rip)
	movq	elapsed_rdtsc(%rip), %rdx
	movq	%r10, %rcx
	subq	%rdx, %rcx
	movq	%rcx, elapsed(%rip)
	movq	%rax, %rsi
.L83:
	addq	ttime(%rip), %rax
	movq	%rax, ttime(%rip)
	leaq	-1(%rdx), %rcx
	movq	%rcx, elapsed_rdtsc(%rip)
	testq	%rdx, %rdx
	je	.L86
	cmpq	overal_time(%rip), %rax
	jl	.L85
.L84:
	movl	$999999, %eax
	subq	%rcx, %rax
	movq	%rax, %rcx
	movq	elapsed(%rip), %rdx
	movl	$.LC44, %edi
	xorl	%eax, %eax
	vzeroupper
	call	printf
	movl	$.LC45, %esi
	movl	$.LC46, %edi
	call	fopen
	movq	%rax, fileForSpeedups(%rip)
	movq	ttbest_rdtsc(%rip), %r9
	movl	$256, %r8d
	movl	$256, %ecx
	movq	programName(%rip), %rdx
	movl	$.LC47, %esi
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	fprintf
	vcvtss2sd	in_image+133632(%rip), %xmm0, %xmm0
	movl	$.LC48, %edi
	movb	$1, %al
	call	printf
	xorl	%eax, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%r10
	.cfi_remember_state
	.cfi_def_cfa 10, 0
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%rbp
	leaq	-8(%r10), %rsp
	.cfi_def_cfa 7, 8
	ret
	.p2align 4,,10
	.p2align 3
.L75:
	.cfi_restore_state
	vmovss	in_image+4(%rdx), %xmm5
	vmovss	in_image(%rdx), %xmm0
	leaq	0(%r13,%rdx), %rcx
	xorl	%eax, %eax
	vmovss	-76(%rbp), %xmm6
	vmovaps	%ymm8, -112(%rbp)
	vmovss	-52(%rbp), %xmm8
	vmovaps	%ymm9, -144(%rbp)
	vmovss	-56(%rbp), %xmm9
	vmovaps	%ymm10, -176(%rbp)
	vmovss	-60(%rbp), %xmm10
	vmovaps	%ymm11, -208(%rbp)
	vmovss	-64(%rbp), %xmm11
	vmovaps	%ymm12, -240(%rbp)
	vmovss	-68(%rbp), %xmm12
	vmovaps	%ymm13, -272(%rbp)
	vmovss	-72(%rbp), %xmm13
	.p2align 4,,10
	.p2align 3
.L78:
	vmovss	in_image+8(%rdx,%rax,2), %xmm2
	vmovss	in_image+12(%rdx,%rax,2), %xmm3
	vmulss	%xmm3, %xmm11, %xmm1
	vfmadd231ss	%xmm2, %xmm10, %xmm1
	vmulss	%xmm5, %xmm9, %xmm4
	vfmadd231ss	%xmm0, %xmm8, %xmm4
	vaddss	%xmm4, %xmm1, %xmm1
	vmovss	%xmm1, ou_image(%rdx,%rax)
	vmulss	%xmm5, %xmm13, %xmm5
	vfmadd132ss	%xmm12, %xmm5, %xmm0
	vmulss	%xmm3, %xmm7, %xmm1
	vfmadd231ss	%xmm2, %xmm6, %xmm1
	vaddss	%xmm1, %xmm0, %xmm0
	vmovss	%xmm0, ou_image(%rcx,%rax)
	addq	$4, %rax
	vmovss	%xmm3, %xmm5, %xmm5
	vmovss	%xmm2, %xmm0, %xmm0
	cmpq	$512, %rax
	jne	.L78
	vmovaps	-112(%rbp), %ymm8
	vmovaps	-144(%rbp), %ymm9
	vmovaps	-176(%rbp), %ymm10
	vmovaps	-208(%rbp), %ymm11
	vmovaps	-240(%rbp), %ymm12
	vmovaps	-272(%rbp), %ymm13
	addq	$1040, %rdx
	cmpq	$266240, %rdx
	jne	.L79
	jmp	.L94
.L86:
	orq	$-1, %rcx
	jmp	.L84
	.cfi_endproc
.LFE5483:
	.size	main, .-main
	.comm	ou_image,270400,32
	.comm	in_image,270400,32
	.comm	half_col,4,4
	.comm	half_row,4,4
	.comm	jj,4,4
	.comm	j,4,4
	.comm	i,4,4
	.globl	high
	.data
	.align 16
	.type	high, @object
	.size	high, 16
high:
	.long	3203877831
	.long	1062610141
	.long	3194321528
	.long	3187966319
	.globl	low
	.align 16
	.type	low, @object
	.size	low, 16
low:
	.long	3187966319
	.long	1046837880
	.long	1062610141
	.long	1056394183
	.comm	temp2i16,32,32
	.comm	mask,128,32
	.globl	ttime
	.bss
	.align 8
	.type	ttime, @object
	.size	ttime, 8
ttime:
	.zero	8
	.globl	overal_time
	.data
	.align 8
	.type	overal_time, @object
	.size	overal_time, 8
overal_time:
	.quad	1999999999
	.globl	elapsed_rdtsc
	.align 8
	.type	elapsed_rdtsc, @object
	.size	elapsed_rdtsc, 8
elapsed_rdtsc:
	.quad	999999
	.comm	elapsed,8,8
	.globl	ttbest_rdtsc
	.align 8
	.type	ttbest_rdtsc, @object
	.size	ttbest_rdtsc, 8
ttbest_rdtsc:
	.quad	99999999999999999
	.comm	ttotal_rdtsc,8,8
	.comm	t2_rdtsc,8,8
	.comm	t1_rdtsc,8,8
	.comm	mask1,128,32
	.globl	programName
	.section	.rodata.str1.1
.LC49:
	.string	" "
	.data
	.align 8
	.type	programName, @object
	.size	programName, 8
programName:
	.quad	.LC49
	.globl	fileForSpeedups
	.bss
	.align 8
	.type	fileForSpeedups, @object
	.size	fileForSpeedups, 8
fileForSpeedups:
	.zero	8
	.section	.rodata.cst8,"aM",@progbits,8
	.align 8
.LC0:
	.long	2296604913
	.long	1055193269
	.align 8
.LC1:
	.long	2296604913
	.long	1056241845
	.align 8
.LC2:
	.long	2439541424
	.long	1069513965
	.section	.rodata.cst32,"aM",@progbits,32
	.align 32
.LC3:
	.long	0
	.long	1
	.long	2
	.long	3
	.long	4
	.long	5
	.long	6
	.long	7
	.align 32
.LC4:
	.long	8
	.long	8
	.long	8
	.long	8
	.long	8
	.long	8
	.long	8
	.long	8
	.align 32
.LC5:
	.long	274877907
	.long	274877907
	.long	274877907
	.long	274877907
	.long	274877907
	.long	274877907
	.long	274877907
	.long	274877907
	.align 32
.LC6:
	.byte	4
	.byte	5
	.byte	6
	.byte	7
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	12
	.byte	13
	.byte	14
	.byte	15
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	4
	.byte	5
	.byte	6
	.byte	7
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	12
	.byte	13
	.byte	14
	.byte	15
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	-128
	.align 32
.LC7:
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	4
	.byte	5
	.byte	6
	.byte	7
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	12
	.byte	13
	.byte	14
	.byte	15
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	4
	.byte	5
	.byte	6
	.byte	7
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	12
	.byte	13
	.byte	14
	.byte	15
	.align 32
.LC8:
	.long	10
	.long	11
	.long	12
	.long	13
	.long	14
	.long	15
	.long	16
	.long	17
	.align 32
.LC9:
	.long	255
	.long	255
	.long	255
	.long	255
	.long	255
	.long	255
	.long	255
	.long	255
	.align 32
.LC10:
	.long	18
	.long	19
	.long	20
	.long	21
	.long	22
	.long	23
	.long	24
	.long	25
	.align 32
.LC11:
	.long	65535
	.long	65535
	.long	65535
	.long	65535
	.long	65535
	.long	65535
	.long	65535
	.long	65535
	.align 32
.LC12:
	.long	26
	.long	27
	.long	28
	.long	29
	.long	30
	.long	31
	.long	32
	.long	33
	.align 32
.LC13:
	.long	34
	.long	35
	.long	36
	.long	37
	.long	38
	.long	39
	.long	40
	.long	41
	.align 32
.LC14:
	.long	42
	.long	43
	.long	44
	.long	45
	.long	46
	.long	47
	.long	48
	.long	49
	.align 32
.LC15:
	.long	50
	.long	51
	.long	52
	.long	53
	.long	54
	.long	55
	.long	56
	.long	57
	.align 32
.LC16:
	.long	58
	.long	59
	.long	60
	.long	61
	.long	62
	.long	63
	.long	64
	.long	65
	.align 32
.LC17:
	.long	66
	.long	67
	.long	68
	.long	69
	.long	70
	.long	71
	.long	72
	.long	73
	.align 32
.LC18:
	.long	74
	.long	75
	.long	76
	.long	77
	.long	78
	.long	79
	.long	80
	.long	81
	.align 32
.LC19:
	.long	82
	.long	83
	.long	84
	.long	85
	.long	86
	.long	87
	.long	88
	.long	89
	.align 32
.LC20:
	.long	90
	.long	91
	.long	92
	.long	93
	.long	94
	.long	95
	.long	96
	.long	97
	.align 32
.LC21:
	.long	98
	.long	99
	.long	100
	.long	101
	.long	102
	.long	103
	.long	104
	.long	105
	.align 32
.LC22:
	.long	106
	.long	107
	.long	108
	.long	109
	.long	110
	.long	111
	.long	112
	.long	113
	.align 32
.LC23:
	.long	114
	.long	115
	.long	116
	.long	117
	.long	118
	.long	119
	.long	120
	.long	121
	.align 32
.LC24:
	.long	122
	.long	123
	.long	124
	.long	125
	.long	126
	.long	127
	.long	128
	.long	129
	.align 32
.LC25:
	.long	130
	.long	131
	.long	132
	.long	133
	.long	134
	.long	135
	.long	136
	.long	137
	.align 32
.LC26:
	.long	138
	.long	139
	.long	140
	.long	141
	.long	142
	.long	143
	.long	144
	.long	145
	.align 32
.LC27:
	.long	146
	.long	147
	.long	148
	.long	149
	.long	150
	.long	151
	.long	152
	.long	153
	.align 32
.LC28:
	.long	154
	.long	155
	.long	156
	.long	157
	.long	158
	.long	159
	.long	160
	.long	161
	.align 32
.LC29:
	.long	162
	.long	163
	.long	164
	.long	165
	.long	166
	.long	167
	.long	168
	.long	169
	.align 32
.LC30:
	.long	170
	.long	171
	.long	172
	.long	173
	.long	174
	.long	175
	.long	176
	.long	177
	.align 32
.LC31:
	.long	178
	.long	179
	.long	180
	.long	181
	.long	182
	.long	183
	.long	184
	.long	185
	.align 32
.LC32:
	.long	186
	.long	187
	.long	188
	.long	189
	.long	190
	.long	191
	.long	192
	.long	193
	.align 32
.LC33:
	.long	194
	.long	195
	.long	196
	.long	197
	.long	198
	.long	199
	.long	200
	.long	201
	.align 32
.LC34:
	.long	202
	.long	203
	.long	204
	.long	205
	.long	206
	.long	207
	.long	208
	.long	209
	.align 32
.LC35:
	.long	210
	.long	211
	.long	212
	.long	213
	.long	214
	.long	215
	.long	216
	.long	217
	.align 32
.LC36:
	.long	218
	.long	219
	.long	220
	.long	221
	.long	222
	.long	223
	.long	224
	.long	225
	.align 32
.LC37:
	.long	226
	.long	227
	.long	228
	.long	229
	.long	230
	.long	231
	.long	232
	.long	233
	.align 32
.LC38:
	.long	234
	.long	235
	.long	236
	.long	237
	.long	238
	.long	239
	.long	240
	.long	241
	.align 32
.LC39:
	.long	242
	.long	243
	.long	244
	.long	245
	.long	246
	.long	247
	.long	248
	.long	249
	.align 32
.LC40:
	.long	250
	.long	251
	.long	252
	.long	253
	.long	254
	.long	255
	.long	256
	.long	257
	.align 32
.LC41:
	.long	258
	.long	259
	.long	260
	.long	261
	.long	262
	.long	263
	.long	264
	.long	265
	.align 32
.LC42:
	.long	1234
	.long	1235
	.long	1236
	.long	1237
	.long	1238
	.long	1239
	.long	1240
	.long	1241
	.ident	"GCC: (GNU) 8.1.1 20180502 (Red Hat 8.1.1-1)"
	.section	.note.GNU-stack,"",@progbits
